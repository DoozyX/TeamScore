// Autogenerated from Pigeon (v10.1.6), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

enum Code {
  one,
  two,
}

class MessageData {
  MessageData({
    required this.team1Score,
    required this.team2Score,
  });

  int team1Score;

  int team2Score;

  Object encode() {
    return <Object?>[
      team1Score,
      team2Score,
    ];
  }

  static MessageData decode(Object result) {
    result as List<Object?>;
    return MessageData(
      team1Score: result[0]! as int,
      team2Score: result[1]! as int,
    );
  }
}

class _TeamScoreHostApiCodec extends StandardMessageCodec {
  const _TeamScoreHostApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is MessageData) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return MessageData.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class TeamScoreHostApi {
  /// Constructor for [TeamScoreHostApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  TeamScoreHostApi({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _TeamScoreHostApiCodec();

  Future<void> sendScore(MessageData arg_message) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.team_score.TeamScoreHostApi.sendScore', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_message]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }
}

class _TeamScoreFlutterApiCodec extends StandardMessageCodec {
  const _TeamScoreFlutterApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is MessageData) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return MessageData.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

abstract class TeamScoreFlutterApi {
  static const MessageCodec<Object?> codec = _TeamScoreFlutterApiCodec();

  void sendScore(MessageData data);

  static void setup(TeamScoreFlutterApi? api, {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.team_score.TeamScoreFlutterApi.sendScore', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.team_score.TeamScoreFlutterApi.sendScore was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final MessageData? arg_data = (args[0] as MessageData?);
          assert(arg_data != null,
              'Argument for dev.flutter.pigeon.team_score.TeamScoreFlutterApi.sendScore was null, expected non-null MessageData.');
          api.sendScore(arg_data!);
          return;
        });
      }
    }
  }
}
